%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 688
%%HiResBoundingBox: 0 0 2382 687.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2382 687.12 re
W
q
[0.24 0 0 -0.24 0 687.12] cm
q
0 0 9925 2862.5 re
W*
q
[26.602209 0 0 26.608768 96.013016 130.459885] cm
93.231003 23.886 m
91.808006 23.886 90.630005 24.900999 90.367004 26.243 c
86.294006 26.106001 l
85.961006 24.338001 84.411003 22.999001 82.548004 22.999001 c
82.310005 22.999001 82.078003 23.027 81.852005 23.069 c
80.282005 18.358 l
80.804008 17.962999 81.145004 17.343 81.145004 16.638001 c
81.145004 15.445001 80.183006 14.472 78.987007 14.472 c
77.793007 14.472 76.821007 15.445 76.821007 16.638001 c
76.821007 17.829 77.793007 18.799 78.987007 18.799 c
79.100006 18.799 79.210007 18.782 79.318008 18.765999 c
80.866005 23.405998 l
79.608002 24.029999 78.734009 25.312998 78.734009 26.811998 c
78.734009 28.084999 79.365005 29.205997 80.324005 29.898998 c
75.755005 36.330997 l
75.268005 36.103996 74.729004 35.968998 74.155006 35.968998 c
72.20401 35.968998 70.611008 37.447998 70.388008 39.344997 c
61.684006 38.471996 l
61.661007 36.103996 59.734005 34.185997 57.360004 34.185997 c
57.069004 34.185997 56.786003 34.216995 56.511005 34.271996 c
54.063004 25.697994 l
55.567005 24.878994 56.597004 23.303993 56.597004 21.468994 c
56.597004 20.839994 56.468002 20.241995 56.249004 19.689995 c
58.758003 18.436995 l
59.500004 19.205994 60.536003 19.687994 61.688004 19.687994 c
63.937004 19.687994 65.765007 17.869993 65.765007 15.617994 c
65.765007 15.355994 65.735008 15.101995 65.688004 14.853994 c
71.152 12.577994 l
71.548004 13.107994 72.173004 13.455995 72.885002 13.455995 c
74.080002 13.455995 75.041 12.484995 75.041 11.289995 c
75.041 10.096995 74.080002 9.129995 72.885002 9.129995 c
71.689003 9.129995 70.717003 10.095995 70.717003 11.289995 c
70.717003 11.400995 70.734001 11.507996 70.75 11.614995 c
65.352997 13.863995 l
64.695 12.495995 63.305996 11.545995 61.687996 11.545995 c
61.083996 11.545995 60.515995 11.685995 59.999996 11.921995 c
58.529999 9.33 l
59.051998 8.935 59.393997 8.314 59.393997 7.606 c
59.393997 6.413 58.430996 5.445 57.238998 5.445 c
56.042 5.445 55.070999 6.413 55.070999 7.606 c
55.070999 8.803 56.042 9.769 57.238998 9.769 c
57.347 9.769 57.452 9.752 57.556 9.737 c
59.118 12.484 l
58.207001 13.231 57.612999 14.35 57.612999 15.619 c
57.612999 16.333 57.813 16.993999 58.135998 17.577 c
55.764999 18.761 l
54.896 17.480999 53.429001 16.639 51.763 16.639 c
49.098999 16.639 46.931 18.804001 46.931 21.469999 c
46.931 24.141998 49.098999 26.305 51.763 26.305 c
52.226002 26.305 52.665001 26.220001 53.089001 26.098 c
55.521 34.612999 l
54.057999 35.306999 53.037998 36.787998 53.037998 38.514999 c
53.037998 39.727001 53.540997 40.82 54.344997 41.605999 c
50.458996 46.584999 l
49.643997 45.995998 48.651997 45.639999 47.571995 45.639999 c
45.170994 45.639999 43.166996 47.346001 42.706993 49.609001 c
35.967995 48.457001 l
35.972996 48.364002 35.995995 48.277 35.995995 48.183002 c
35.995995 45.513 33.825996 43.346001 31.162994 43.346001 c
30.309994 43.346001 29.520994 43.584999 28.825994 43.972 c
23.526995 35.263 l
24.600994 34.529999 25.307995 33.297001 25.307995 31.896 c
25.307995 31.729 25.277994 31.569 25.258995 31.407 c
27.604996 30.84 l
28.016996 31.690001 28.880997 32.280998 29.887997 32.280998 c
31.288998 32.280998 32.430996 31.140999 32.430996 29.736998 c
32.430996 28.332998 31.288996 27.192997 29.887997 27.192997 c
28.483997 27.192997 27.342997 28.332996 27.342997 29.736998 c
27.342997 29.766998 27.350996 29.794998 27.351997 29.823997 c
25.011997 30.387997 l
24.721996 29.664997 24.231997 29.050997 23.608997 28.601997 c
25.659998 23.711998 l
26.012999 23.896997 26.407997 24.010998 26.832998 24.010998 c
28.240997 24.010998 29.381998 22.873999 29.381998 21.467999 c
29.381998 20.065998 28.240997 18.926998 26.832998 18.926998 c
25.430998 18.926998 24.290998 20.064999 24.290998 21.467999 c
24.290998 22.050999 24.494999 22.580999 24.823997 23.008999 c
22.685997 28.105999 l
22.234997 27.933998 21.750998 27.829998 21.239998 27.829998 c
19.079998 27.829998 17.330997 29.511997 17.195997 31.636997 c
11.825997 30.589996 l
11.805997 29.200996 10.677998 28.082996 9.283998 28.082996 c
7.878998 28.082996 6.739997 29.220997 6.739997 30.626997 c
6.739997 32.033997 7.878997 33.170998 9.283998 33.170998 c
10.337997 33.170998 11.242998 32.530998 11.628998 31.617998 c
17.251999 32.714996 l
17.630999 34.571995 19.271999 35.967995 21.238998 35.967995 c
21.712999 35.967995 22.159998 35.870995 22.582998 35.721996 c
27.968998 44.574997 l
26.968998 45.460999 26.325998 46.740997 26.325998 48.181995 c
26.325998 49.516994 26.867998 50.724995 27.744999 51.599995 c
26.130999 54.018993 l
25.209999 53.384995 24.093998 53.012993 22.889999 53.012993 c
19.733 53.012993 17.168999 55.575993 17.168999 58.742992 c
17.168999 61.900993 19.732998 64.457993 22.889999 64.457993 c
23.751999 64.457993 24.566999 64.262993 25.299999 63.922993 c
28.046999 68.965996 l
26.24 70.203995 25.052999 72.281998 25.052999 74.641998 c
25.052999 76.548996 25.834999 78.277 27.094999 79.522995 c
22.549999 84.238998 l
21.896999 83.653 21.042 83.286995 20.094999 83.286995 c
18.057999 83.286995 16.407 84.934998 16.407 86.970993 c
16.407 89.007996 18.057999 90.661995 20.094999 90.661995 c
22.132999 90.661995 23.784 89.007996 23.784 86.970993 c
23.784 86.262993 23.575001 85.608994 23.228001 85.046989 c
27.897001 80.196991 l
29.030001 81.019989 30.419001 81.510994 31.925001 81.510994 c
35.096001 81.510994 37.761002 79.349991 38.549 76.426994 c
44.401001 77.218994 l
44.552002 80.312996 47.106003 82.778992 50.235001 82.778992 c
51.583 82.778992 52.819 82.319992 53.806999 81.555992 c
56.384998 85.954994 l
55.587997 86.629997 55.070999 87.622993 55.070999 88.750992 c
55.070999 90.787994 56.726997 92.443993 58.760998 92.443993 c
60.799999 92.443993 62.450996 90.787994 62.450996 88.750992 c
62.450996 86.71199 60.799995 85.068993 58.760998 85.068993 c
58.226997 85.068993 57.721996 85.186989 57.263996 85.390991 c
54.588997 80.827988 l
55.517998 79.792984 56.086998 78.429985 56.086998 76.930984 c
56.086998 75.191986 55.323997 73.633987 54.119999 72.561981 c
55.947998 69.635979 l
56.619999 69.905975 57.351997 70.057976 58.119999 70.057976 c
60.764999 70.057976 63.001999 68.30098 63.729 65.893974 c
71.543999 64.776978 l
72.190002 65.659981 73.226997 66.239975 74.406998 66.239975 c
75.182999 66.239975 75.894997 65.985977 76.479996 65.564972 c
79.802994 68.355972 l
79.611992 68.712975 79.492996 69.114975 79.492996 69.547974 c
79.492996 70.955971 80.630997 72.096977 82.036995 72.096977 c
83.434998 72.096977 84.579994 70.955978 84.579994 69.547974 c
84.579994 68.143974 83.434998 67.002975 82.036995 67.002975 c
81.444992 67.002975 80.907997 67.212975 80.475998 67.551979 c
77.229996 64.825981 l
77.685997 64.226982 77.966995 63.48798 77.966995 62.676983 c
77.966995 61.287983 77.163994 60.094982 76.002998 59.506981 c
76.630997 57.304981 l
76.736 57.316982 76.839996 57.336983 76.948997 57.336983 c
78.634995 57.336983 80.000999 55.972984 80.000999 54.285984 c
80.000999 52.769985 78.893997 51.518986 77.444 51.280983 c
76.076004 43.061981 l
77.202003 42.398983 77.967003 41.187981 77.967003 39.788982 c
77.967003 38.629982 77.440002 37.603981 76.625 36.902981 c
81.254997 30.387981 l
81.658997 30.533981 82.089996 30.626982 82.543999 30.626982 c
83.283997 30.626982 83.969002 30.406982 84.555 30.041983 c
86.116997 31.552982 l
85.874001 31.902983 85.727997 32.326981 85.727997 32.786983 c
85.727997 33.984985 86.691994 34.951984 87.886993 34.951984 c
89.080994 34.951984 90.054993 33.985985 90.054993 32.786983 c
90.054993 31.591984 89.080994 30.626984 87.886993 30.626984 c
87.534996 30.626984 87.208992 30.717983 86.915993 30.865984 c
85.361992 29.363983 l
85.901993 28.767982 86.248993 28.003983 86.325989 27.155983 c
90.352989 27.290983 l
90.581985 28.676983 91.773987 29.734983 93.22699 29.734983 c
94.839989 29.734983 96.15699 28.425983 96.15699 26.810984 c
96.161003 25.198 94.845001 23.886 93.231003 23.886 c
h
53.282001 71.940002 m
52.393002 71.396004 51.353001 71.078003 50.235001 71.078003 c
47.265999 71.078003 44.815002 73.299004 44.441002 76.172005 c
38.748001 75.402008 l
38.776001 75.152008 38.792 74.89901 38.792 74.642006 c
38.792 70.841003 35.715 67.765007 31.924999 67.765007 c
30.862 67.765007 29.858 68.014008 28.959 68.446007 c
26.207001 63.398006 l
27.664001 62.363007 28.616001 60.667007 28.616001 58.744007 c
28.616001 57.160007 27.975 55.727009 26.939001 54.690006 c
28.568001 52.248005 l
29.318001 52.727005 30.205002 53.014004 31.162001 53.014004 c
33.369999 53.014004 35.218002 51.518005 35.792999 49.490005 c
42.612 50.656006 l
42.642998 53.367004 44.848999 55.555008 47.570999 55.555008 c
48.308998 55.555008 49.002998 55.382008 49.632999 55.092007 c
53.952 60.102005 l
52.912998 61.158005 52.27 62.605003 52.27 64.204002 c
52.27 66.293999 53.371002 68.125999 55.02 69.162003 c
53.282001 71.940002 l
h
76.389 51.289001 m
74.973999 51.555 73.901001 52.795002 73.901001 54.287003 c
73.901001 55.496002 74.610001 56.530003 75.629997 57.024002 c
75.015999 59.174004 l
74.819 59.140003 74.618996 59.112003 74.410995 59.112003 c
72.441994 59.112003 70.851997 60.712002 70.851997 62.676003 c
70.851997 63.069004 70.93 63.439003 71.046997 63.791004 c
63.950996 64.806007 l
63.971996 64.60701 63.981995 64.406006 63.981995 64.202011 c
63.981995 60.970013 61.354996 58.352013 58.121994 58.352013 c
56.866993 58.352013 55.706993 58.750011 54.754993 59.423012 c
50.543995 54.540012 l
51.740993 53.635014 52.527996 52.214012 52.527996 50.597012 c
52.527996 49.318012 52.029995 48.164013 51.234997 47.284012 c
55.186996 42.230011 l
55.827995 42.60701 56.564995 42.839012 57.360996 42.839012 c
59.405998 42.839012 61.110996 41.413013 61.562996 39.506012 c
70.405998 40.392014 l
70.697998 42.207012 72.259995 43.599014 74.155998 43.599014 c
74.478996 43.599014 74.789001 43.547016 75.088997 43.471016 c
76.389 51.289001 l
h
f
Q
q
[69.468933 0 0 69.486061 3144.6172 391.31107] cm
6.14 9.42 m
8.04 9.42 9.639999 10.22 10.62 11.9 c
8.219999 13.04 l
7.699999 12.6 7.279999 12.2 6.179999 12.2 c
4.98 12.2 3.759999 13.12 3.759999 14.82 c
3.759999 16.5 4.98 17.379999 6.179999 17.379999 c
7.279999 17.379999 7.699999 17.019999 8.219999 16.58 c
10.66 17.719999 l
9.639999 19.4 8.08 20.16 6.14 20.16 c
3.82 20.16 0.7 18.5 0.7 14.82 c
0.7 11.2 3.82 9.42 6.14 9.42 c
h
18.66 9.44 m
20.6 9.44 22.58 10.74 22.58 14.039999 c
22.58 20 l
19.42 20 l
19.42 14.26 l
19.42 12.68 18.879999 12.18 17.880001 12.18 c
16.460001 12.18 15.640001 13.56 15.440001 14.16 c
15.440001 20 l
12.280001 20 l
12.280001 5.86 l
15.440001 5.86 l
15.440001 11.4 l
15.64 10.9 16.700001 9.44 18.66 9.44 c
h
29.66 9.42 m
32.02 9.42 35.32 11.2 34.66 15.9 c
27.4 15.9 l
27.76 16.98 28.699999 17.539999 29.959999 17.539999 c
31.24 17.539999 31.639999 17.259998 32.360001 16.959999 c
34.100002 18.639999 l
33.180004 19.539999 31.940002 20.199999 29.840002 20.199999 c
27.260002 20.199999 24.180002 18.419998 24.180002 14.839998 c
24.180002 11.199998 27.300003 9.419998 29.660002 9.419998 c
29.66 9.42 l
h
29.66 12.12 m
28.76 12.12 27.84 12.639999 27.440001 13.68 c
31.860001 13.68 l
31.540001 12.64 30.560001 12.120001 29.66 12.120001 c
29.66 12.12 l
h
50.360001 9.44 m
52.580002 9.44 54.540001 10.879999 54.540001 14.4 c
54.540001 20 l
51.380001 20 l
51.380001 14.5 l
51.380001 13.18 50.82 12.18 49.360001 12.18 c
48.139999 12.18 47.32 13.26 47.080002 14.22 c
47.080002 20 l
43.920002 20 l
43.920002 14.5 l
43.920002 13.18 43.100002 12.18 41.900002 12.18 c
40.600002 12.18 39.82 13.06 39.620003 14.22 c
39.620003 20 l
36.460003 20 l
36.460003 9.6 l
39.620003 9.6 l
39.620003 11.5 l
39.660004 11.020001 40.680004 9.440001 42.720001 9.440001 c
44.220001 9.440001 45.66 10.240001 46.52 11.700001 c
46.760002 11.14 47.959999 9.440001 50.360001 9.440001 c
50.360001 9.44 l
h
63.139999 9.44 m
63.419998 9.44 63.700001 9.44 63.959999 9.5 c
63.959999 12.520001 l
63.719997 12.46 63.439999 12.46 63.239998 12.46 c
61.32 12.46 59.779999 13.84 59.619999 15.76 c
59.619999 20 l
56.459999 20 l
56.459999 9.6 l
59.619999 9.6 l
59.619999 12.14 l
60.099998 10.58 61.299999 9.440001 63.139999 9.440001 c
63.139999 9.44 l
h
68.739998 5.86 m
68.739998 8.520001 l
65.579994 8.520001 l
65.579994 5.860001 l
68.739998 5.860001 l
68.739998 5.86 l
h
68.739998 9.6 m
68.739998 20 l
65.579994 20 l
65.579994 9.6 l
68.739998 9.6 l
h
77.160004 9.44 m
79.100006 9.44 81.080002 10.74 81.080002 14.039999 c
81.080002 20 l
77.919998 20 l
77.919998 14.26 l
77.919998 12.68 77.379997 12.18 76.379997 12.18 c
74.959999 12.18 74.139999 13.56 73.939995 14.16 c
73.939995 20 l
70.779991 20 l
70.779991 9.6 l
73.939995 9.6 l
73.939995 11.400001 l
74.139992 10.900001 75.199997 9.440001 77.159996 9.440001 c
77.160004 9.44 l
h
90.480003 9.6 m
93.640007 9.6 l
93.640007 20 l
93.640007 23.16 90.44001 24.119999 88.12001 24.119999 c
87.020012 24.119999 86.020012 23.939999 85.380013 23.599998 c
85.380013 21.019999 l
86.020012 21.359999 86.980011 21.499998 88.12001 21.499998 c
89.980011 21.499998 90.480011 20.539997 90.480011 19.999998 c
90.480011 18.959999 l
90.340012 19.32 89.400009 20.199999 87.800011 20.199999 c
85.420013 20.199999 82.680008 18.499998 82.680008 14.779999 c
82.680008 11.199999 85.420006 9.419998 87.800011 9.419998 c
89.400009 9.419998 90.340012 10.339998 90.480011 10.559999 c
90.480011 9.599999 l
90.480003 9.6 l
h
88.260002 17.42 m
89.560005 17.42 90.620003 16.52 90.620003 14.78 c
90.620003 13.099999 89.560005 12.2 88.260002 12.2 c
86.900002 12.2 85.740005 13.12 85.740005 14.78 c
85.740005 16.5 86.900009 17.42 88.260002 17.42 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
